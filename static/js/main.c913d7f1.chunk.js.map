{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebaseConfig","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","REACT_APP_MESSAGIN_ID","appId","firebase","initializeApp","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onSubmit","event","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","onChange","target","name","value","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Tweet","tweetObj","isOwner","editing","setEditing","text","newTweet","setNewTweet","onDeleteClick","ok","window","confirm","doc","id","delete","attachmentUrl","refFromURL","toggleEditing","update","autoFocus","src","faTrash","faPencilAlt","TweetFactory","userObj","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","htmlFor","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","onSnapshot","snapshot","tweetArray","docs","map","marginTop","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","getMyTweets","where","orderBy","get","updateProfile","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","Profile","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAKIA,G,kBAAiB,CACjBC,OAAQC,0CACRC,WAAYD,sCACZE,UAAWF,sBACXG,cAAeH,kCACfI,kBAAmBJ,kdAAYK,sBAC/BC,MAAON,6CAGXO,IAASC,cAAcV,GAEhB,IAAMW,EAAmBF,IAEnBG,EAAcH,IAASI,OACvBC,EAAYL,IAASM,YACrBC,EAAiBP,IAASQ,UC+BxBC,EAhDE,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,OAEaF,mBAAS,IAFtB,mBAEZG,EAFY,KAEFC,EAFE,OAGiBJ,oBAAS,GAH1B,mBAGZK,EAHY,KAGAC,EAHA,OAION,mBAAS,IAJhB,mBAIZO,EAJY,KAILC,EAJK,KAKbC,EAAQ,uCAAG,WAAMC,GAAN,eAAAC,EAAA,yDACbD,EAAME,iBADO,UAINP,EAJM,gCAMQZ,EAAYoB,+BACrBZ,EAAOE,GAPN,OAMLW,EANK,+CAWQrB,EAAYsB,2BACrBd,EAAOE,GAZN,QAWLW,EAXK,eAeTE,QAAQC,IAAIH,GAfH,kDAiBTN,EAAS,KAAMU,SAjBN,0DAAH,sDAoBRC,EAAW,SAACT,GAAW,IAAD,EACMA,EAAxBU,OAASC,EADS,EACTA,KAAMC,EADG,EACHA,MACT,UAATD,EACCnB,EAASoB,GACK,aAATD,GACLjB,EAAYkB,IAKpB,OACI,qCACI,uBAAMb,SAAUA,EAAUc,UAAU,YAApC,UACI,uBAAOF,KAAK,QAAQG,KAAK,QAAQC,YAAY,QAAQC,UAAQ,EAACJ,MAAOrB,EAAOkB,SAAUA,EAAUI,UAAU,cAC1G,uBAAOF,KAAK,WAAWG,KAAK,WAAWC,YAAY,WAAWC,UAAQ,EAACJ,MAAOnB,EAAUgB,SAAUA,EAAUI,UAAU,cACtH,uBAAOC,KAAK,SAASF,MAAOjB,EAAa,iBAAmB,SAAUkB,UAAU,yBAC/EhB,GAAS,sBAAMgB,UAAU,YAAhB,SAA6BhB,OAE3C,sBAAMoB,QAVQ,kBAAMrB,GAAc,SAAAsB,GAAI,OAAKA,MAUbL,UAAU,aAAxC,SAAsDlB,EAAa,UAAY,uBCR5EwB,EA5BF,WACT,IAAMC,EAAa,uCAAG,WAAMpB,GAAN,mBAAAC,EAAA,4DAGP,YAFIU,EAAUX,EAAlBU,OAAQC,MAGXU,EAAW,IAAIvC,EAAiBE,KAAKsC,mBACxB,WAARX,IACLU,EAAW,IAAIvC,EAAiBE,KAAKuC,oBANvB,SAQCxC,EAAYyC,gBAAgBH,GAR7B,OAQZjB,EARY,OASlBE,QAAQC,IAAIH,GATM,2CAAH,sDAWnB,OACI,sBAAKS,UAAU,gBAAf,UACI,cAAC,IAAD,CACIY,KAAMC,IACNC,MAAO,UACPC,KAAK,KACLC,MAAO,CAAEC,aAAc,MAE3B,cAAC,EAAD,IACA,sBAAKjB,UAAU,WAAf,UACI,yBAAQI,QAASG,EAAeT,KAAK,SAASE,UAAU,UAAxD,kCAAuF,cAAC,IAAD,CAAiBY,KAAMM,SAC9G,yBAAQd,QAASG,EAAeT,KAAK,SAASE,UAAU,UAAxD,kCAAuF,cAAC,IAAD,CAAiBY,KAAMO,gB,gBCiC/GC,EA7DD,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,QAAa,EACL7C,oBAAS,GADJ,mBAC5B8C,EAD4B,KACnBC,EADmB,OAEH/C,mBAAS4C,EAASI,MAFf,mBAE5BC,EAF4B,KAElBC,EAFkB,KAG7BC,EAAa,uCAAG,4BAAAxC,EAAA,yDACZyC,EAAKC,OAAOC,QAAQ,+CAC1BtC,QAAQC,IAAImC,IACTA,EAHe,gCAKRzD,EAAU4D,IAAV,iBAAwBX,EAASY,KAAMC,SAL/B,UAMgB,KAA3Bb,EAASc,cANE,gCAOJ7D,EAAe8D,WAAWf,EAASc,eAAeD,SAP9C,2CAAH,qDAWbG,EAAgB,kBAAMb,GAAW,SAAAnB,GAAI,OAAKA,MAC1CnB,EAAQ,uCAAG,WAAMC,GAAN,SAAAC,EAAA,6DACbD,EAAME,iBADO,SAGPjB,EAAU4D,IAAV,iBAAwBX,EAASY,KAAMK,OAAO,CAChDb,KAAKC,IAJI,OAMbF,GAAW,GANE,2CAAH,sDAcd,OACI,qBAAKxB,UAAU,QAAf,SACKuB,EACG,qCACI,uBAAMrC,SAAUA,EAAWc,UAAU,sBAArC,UACI,uBAAOC,KAAK,OAAOC,YAAY,kBAAkBH,MAAO2B,EAAUvB,UAAQ,EAACoC,WAAS,EAAC3C,SAXxF,SAACT,GAAU,IAEZY,EACRZ,EADAU,OAAQE,MAEZ4B,EAAY5B,IAO6GC,UAAU,cACnH,uBAAOC,KAAK,SAASF,MAAM,cAAeC,UAAU,eAExD,sBAAMI,QAASiC,EAAerC,UAAU,oBAAxC,uBAKR,qCACI,6BAAKqB,EAASI,OACbJ,EAASc,eAAiB,qBAAKK,IAAKnB,EAASc,gBAC7Cb,GACG,sBAAKtB,UAAU,iBAAf,UACI,sBAAMI,QAASwB,EAAf,SACI,cAAC,IAAD,CAAiBhB,KAAM6B,QAE3B,sBAAMrC,QAASiC,EAAf,SACI,cAAC,IAAD,CAAiBzB,KAAM8B,iB,QCkDpCC,EApGM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACRnE,mBAAS,IADD,mBAC3BoE,EAD2B,KACpBC,EADoB,OAEErE,mBAAS,IAFX,mBAE3BsE,EAF2B,KAEfC,EAFe,KAG5B9D,EAAQ,uCAAG,WAAMC,GAAN,qBAAAC,EAAA,yDACC,KAAVyD,EADS,oDAIb1D,EAAME,iBAWF8C,EAAgB,GACF,KAAfY,EAhBU,wBAiBHE,EAAgB3E,EAAe4E,MAAMC,MAArB,UAA8BP,EAAQQ,IAAtC,YAA6CC,gBAjB1D,SAkBcJ,EAAcK,UAAUP,EAAY,YAlBlD,cAkBHQ,EAlBG,iBAqBaA,EAASL,IAAIM,iBArB1B,QAqBTrB,EArBS,sBAuBPd,EAAW,CACbI,KAAMoB,EACNY,UAAWC,KAAKC,MAChBC,UAAWhB,EAAQQ,IACnBjB,iBA3BS,UA6BP/D,EAAUyF,WAAW,UAAUC,IAAIzC,GA7B5B,QA8BbyB,EAAS,IACTE,EAAc,IA/BD,4CAAH,sDAsDd,OACI,uBAAM9D,SAAUA,EAAUc,UAAU,cAApC,UACI,sBAAKA,UAAU,0BAAf,UACI,uBACIA,UAAU,sBACVD,MAAO8C,EACPjD,SA3BC,SAACT,GAAW,IAEbY,EACVZ,EADEU,OAAQE,MAEZ+C,EAAS/C,IAwBGE,KAAK,OACLC,YAAY,uBACZ6D,UAAW,MAEf,uBAAO9D,KAAK,SAASF,MAAM,SAASC,UAAU,2BAElD,wBAAOgE,QAAQ,cAAchE,UAAU,sBAAvC,UACI,8CACA,cAAC,IAAD,CAAiBY,KAAMqD,SAE3B,uBACIhC,GAAG,cACHhC,KAAK,OACLiE,OAAO,UACPtE,SApCS,SAACT,GAAU,IAGtBgF,EADmBhF,EAAlBU,OAAQuE,MACO,GAEhBC,EAAS,IAAIC,WACnBD,EAAOE,UAAY,SAACC,GAAkB,IAEXC,EAAWD,EAA3BE,cAAgBD,OACvBzB,EAAcyB,IAElBJ,EAAOM,cAAcR,IA0BbnD,MAAO,CACH4D,QAAS,KAGhB7B,GACG,sBAAK/C,UAAU,0BAAf,UACI,qBACIwC,IAAKO,EACL/B,MAAO,CACH6D,gBAAiB9B,KAGzB,sBAAK/C,UAAU,qBAAqBI,QApC1B,kBAAM4C,EAAc,KAoC9B,UACI,0CACA,cAAC,IAAD,CAAiBpC,KAAMkE,gBCjDhCC,EA7CF,SAAC,GAAe,IAAdnC,EAAa,EAAbA,QAAa,EACInE,mBAAS,IADb,mBACjBuG,EADiB,KACTC,EADS,KAyBxB,OAZAC,qBAAU,WAEN9G,EAAUyF,WAAW,UAAUsB,YAAW,SAACC,GAEvC,IAAMC,EAAaD,EAASE,KAAKC,KAAI,SAAAvD,GAAG,oBACpCC,GAAGD,EAAIC,IACJD,EAAIzC,WAGX0F,EAAUI,QAEf,IAEC,sBAAKrF,UAAU,YAAf,UACI,cAAC,EAAD,CAAc4C,QAASA,IACvB,qBAAK5B,MAAO,CAAEwE,UAAW,IAAzB,SACKR,EAAOO,KAAI,SAAC1C,GAAD,OAIR,aAJyB,CAIxB,EAAD,CAEIxB,SAAUwB,EACVvB,QAASuB,EAAMe,YAAchB,EAAQQ,KAFhCP,EAAMZ,aCnCpB,cAA+B,IAA5BwD,EAA2B,EAA3BA,YAAa7C,EAAc,EAAdA,QACrB8C,EAAUC,cADyB,EAEGlH,mBAASmE,EAAQgD,aAFpB,mBAElCC,EAFkC,KAElBC,EAFkB,KAOnCC,EAAW,uCAAG,4BAAA3G,EAAA,sEACKhB,EAChByF,WAAW,UACXmC,MAAM,YAAa,KAAMpD,EAAQQ,KACjC6C,QAAQ,aACRC,MALW,OACVlB,EADU,OAMhBvF,QAAQC,IAAIsF,EAAOM,KAAKC,KAAI,SAACvD,GAAD,OAASA,EAAIzC,WANzB,2CAAH,qDAYXL,EAAQ,uCAAG,WAAMC,GAAN,SAAAC,EAAA,yDACbD,EAAME,iBACHuD,EAAQgD,cAAgBC,EAFd,gCAKHjD,EAAQuD,cAAc,CACxBP,YAAcC,IANT,OAQTJ,IARS,2CAAH,sDAed,OAHAP,qBAAU,WACNa,MACD,IAEC,sBAAK/F,UAAU,YAAf,UACI,uBAAMd,SAAUA,EAAUc,UAAU,cAApC,UACI,uBACIJ,SAvBC,SAACT,GAAU,IACPY,EAAYZ,EAAtBU,OAAUE,MACjB+F,EAAkB/F,IAsBNE,KAAK,OACLsC,WAAS,EACTrC,YAAY,eACZH,MAAO8F,EACP7F,UAAU,cAEd,uBACIC,KAAK,SACLF,MAAM,iBACNC,UAAU,UACVgB,MAAO,CACHwE,UAAW,SAIvB,sBAAMxF,UAAU,2BAA2BI,QAnD7B,WAClBlC,EAAYkI,UACZV,EAAQW,KAAK,MAiDT,yBCtBGC,EA9BI,SAAC,GAAD,IAAE1D,EAAF,EAAEA,QAAF,OACf,8BACI,qBAAI5B,MAAO,CAAEuF,QAAS,OAAQC,eAAgB,SAAUhB,UAAW,IAAnE,UACI,6BACI,cAAC,IAAD,CAAMiB,GAAG,IAAIzF,MAAO,CAAE0F,YAAa,IAAnC,SACI,cAAC,IAAD,CAAiB9F,KAAMC,IAAWC,MAAO,UAAWC,KAAK,WAGjE,6BACI,eAAC,IAAD,CACI0F,GAAG,WACHzF,MAAO,CACH2F,WAAY,GACZJ,QAAS,OACTK,cAAe,SACfC,WAAY,SACZC,SAAU,IAPlB,UAUI,cAAC,IAAD,CAAiBlG,KAAMmG,IAAQjG,MAAO,UAAWC,KAAK,OAC1D,sBAAMC,MAAO,CAAEwE,UAAW,IAA1B,SACK5C,EAAQgD,YAAR,UACIhD,EAAQgD,YADZ,kBAEC,uBCgBPoB,EAtCG,SAAC,GAAwC,IAAvCvB,EAAsC,EAAtCA,YAAawB,EAAyB,EAAzBA,WAAYrE,EAAa,EAAbA,QACzC,OACI,eAAC,IAAD,WACKqE,GAAc,cAAC,EAAD,CAAYrE,QAASA,IACpC,cAAC,IAAD,UACI,mCACKqE,EACG,sBACIjG,MAAO,CACHkG,SAAU,IACVC,MAAO,OACPC,OAAQ,SACR5B,UAAW,GACXe,QAAS,OACTC,eAAgB,UAPxB,UAUI,cAAC,IAAD,CAAOa,OAAK,EAACC,KAAO,IAApB,SACI,cAAC,EAAD,CAAM1E,QAASA,MAEnB,cAAC,IAAD,CAAOyE,OAAK,EAACC,KAAO,WAApB,SACI,cAACC,EAAD,CAAS3E,QAASA,EAAS6C,YAAaA,SAKhD,mCACI,cAAC,IAAD,CAAO4B,OAAK,EAACC,KAAO,IAApB,SACI,cAAC,EAAD,gBCejBE,MA9Cf,WAAgB,IAAD,EACW/I,oBAAS,GADpB,mBACNgJ,EADM,KACAC,EADA,OAEiBjJ,mBAAS,MAF1B,mBAENmE,EAFM,KAEG+E,EAFH,KAsCb,OAnCAzC,qBAAU,WAERhH,EAAY0J,oBAAmB,SAACC,GAI5BF,EAHCE,EAGU,CACTjC,YAAaiC,EAAKjC,YAClBxC,IAAKyE,EAAKzE,IACV+C,cAAe,SAAC2B,GAAD,OAAUD,EAAK1B,cAAc2B,KAOnC,MAEbJ,GAAQ,QAET,IAgBD,qCACGD,EAAO,cAAC,EAAD,CAAWhC,YAhBH,WAElB,IAAMoC,EAAO3J,EAAY6J,YAGzBJ,EAAW,CACT/B,YAAaiC,EAAKjC,YAClBxC,IAAKyE,EAAKzE,IACV+C,cAAe,SAAC2B,GAAD,OAAUD,EAAK1B,cAAc2B,OAQCb,WAAYe,QAAQpF,GAAUA,QAASA,IAAc,kBAClG,4CAAgB,IAAIc,MAAOuE,cAA3B,wB,MCtCNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c913d7f1.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nvar firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_DATABASE_URL,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\n    appId: process.env.REACT_APP_APP_ID\n  };\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\n\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();\n","import React, { useState } from \"react\";\nimport { authService } from \"../fbase\";\n\nconst AuthForm = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [newAccount, setNewAccount] = useState(true);\n    const [error, setError] = useState(\"\");\n    const onSubmit = async(event) => {\n        event.preventDefault(); //default 를 막고 내가 handle  -> 기본 : 새로고침 됨  // -> 이거 없으면 새로고침 됨 \n        try{\n            let data;\n            if(newAccount){\n                // create account\n                data = await authService.createUserWithEmailAndPassword(\n                    email, password\n                );\n            }else {\n                //log in \n                data = await authService.signInWithEmailAndPassword(\n                    email, password\n                );\n            }\n            console.log(data);\n        } catch (error) {\n            setError(error.message);\n        }\n    };\n    const onChange = (event) => {\n        const{target: {name, value}} =event;\n        if(name === \"email\"){\n            setEmail(value)\n        }else if(name === \"password\"){\n            setPassword(value)\n        }\n    };\n    const toggleAccount = () => setNewAccount(prev => !prev);\n\n    return (\n        <>\n            <form onSubmit={onSubmit} className=\"container\">\n                <input name=\"email\" type=\"email\" placeholder=\"Email\" required value={email} onChange={onChange} className=\"authInput\"/>\n                <input name=\"password\" type=\"password\" placeholder=\"Password\" required value={password} onChange={onChange} className=\"authInput\"/>\n                <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\"} className=\"authInput authSubmit\"/>\n                {error && <span className=\"authError\">{error}</span>}\n            </form>\n            <span onClick={toggleAccount} className=\"authSwitch\">{newAccount ? \"Sign In\" : \"Create Account\"}</span>\n        </>\n    )\n\n};\nexport default AuthForm;","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faTwitter,\n    faGoogle,\n    faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\nimport { authService, firebaseInstance } from \"../fbase\";\nimport AuthForm from \"../components/AuthForm\";\n\nconst Auth = () => {\n    const onSocialClick = async(event) => {\n        const {target:{name},} = event;\n        let provider ;\n        if(name ===\"google\"){\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\n        }else if(name ===\"github\"){\n            provider = new firebaseInstance.auth.GithubAuthProvider();\n        }\n        const data = await authService.signInWithPopup(provider);\n        console.log(data);\n    }\n    return (\n        <div className=\"authContainer\">\n            <FontAwesomeIcon\n                icon={faTwitter}\n                color={\"#04AAFF\"}\n                size=\"3x\"\n                style={{ marginBottom: 30 }}\n            />\n            <AuthForm />\n            <div className=\"authBtns\">\n                <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">Continue with Google <FontAwesomeIcon icon={faGoogle} /></button>\n                <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">Continue with Github <FontAwesomeIcon icon={faGithub} /></button>\n            </div>\n        </div>\n    )\n};\nexport default Auth;","import React, { useState } from \"react\";\nimport { dbService, storageService } from \"../fbase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Tweet = ({tweetObj, isOwner}) => {\n    const [editing, setEditing] = useState(false);  // true / false : editing mode or not \n    const [newTweet, setNewTweet] = useState(tweetObj.text); // update text in editing mode \n    const onDeleteClick = async() => {\n        const ok = window.confirm(\"Are you sure you wnat to delete this tweet?\");\n        console.log(ok);\n        if(ok) {\n            //delete tweet\n            await dbService.doc(`tweets/${tweetObj.id}`).delete(); // tweetdbj.id => database id를 가지고 삭제 \n            if(tweetObj.attachmentUrl !== \"\"){\n                await storageService.refFromURL(tweetObj.attachmentUrl).delete();\n            }\n        } \n    }\n    const toggleEditing = () => setEditing(prev => !prev);\n    const onSubmit = async(event) =>{\n        event.preventDefault();\n        // console.log(tweetObj, newTweet);\n        await dbService.doc(`tweets/${tweetObj.id}`).update({\n            text:newTweet,\n        });\n        setEditing(false);\n    };\n    const onChange = (event) =>{\n        const {\n            target:{value}, \n        } = event;\n        setNewTweet(value);\n    };\n    return (\n        <div className=\"tweet\">\n            {editing ? (\n                <>\n                    <form onSubmit={onSubmit}  className=\"container tweetEdit\">\n                        <input type=\"text\" placeholder=\"Edit your tweet\" value={newTweet} required autoFocus onChange={onChange} className=\"formInput\"/>\n                        <input type=\"submit\" value=\"UpdateTweet\"  className=\"formBtn\"/>\n                    </form> \n                    <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\n                        Cancel\n                    </span>\n                </>\n            ):(\n            <>\n                <h4>{tweetObj.text}</h4>\n                {tweetObj.attachmentUrl && <img src={tweetObj.attachmentUrl}/>}\n                {isOwner && (\n                    <div className=\"tweet__actions\">\n                        <span onClick={onDeleteClick}>\n                            <FontAwesomeIcon icon={faTrash} />\n                        </span>\n                        <span onClick={toggleEditing}>\n                            <FontAwesomeIcon icon={faPencilAlt} />\n                        </span>\n                    </div>\n                )}\n            </>\n            )}\n        </div>\n    )\n};\n\nexport default Tweet;","import React, { useState } from \"react\";\nimport { storageService, dbService } from \"../fbase\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst TweetFactory = ({ userObj }) => {\n    const [tweet, setTweet] = useState(\"\");\n    const [attachment, setAttachment] = useState(\"\");\n    const onSubmit = async(event) => {\n        if (tweet === \"\") {\n            return;\n          }\n        event.preventDefault();\n        // await dbService.collection(\"tweets\").add({ // tweet upload \n        //     text:tweet,\n        //     createdAt:Date.now(),\n        //     creatorId: userObj.uid,\n        // })\n        // setTweet(\"\");\n    \n        // if img -> upload img -> get img url -> tweet + img url \n        // not img -> tweet \n\n        let attachmentUrl = \"\";\n        if(attachment !== \"\"){\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\n            const response = await attachmentRef.putString(attachment, \"data_url\");\n            // console.log(response);\n            // console.log(response.ref.getDownloadURL());\n            attachmentUrl = await response.ref.getDownloadURL();\n        }\n        const tweetObj = {\n            text: tweet, \n            createdAt: Date.now(),\n            creatorId: userObj.uid,\n            attachmentUrl,\n        };\n        await dbService.collection(\"tweets\").add(tweetObj);\n        setTweet(\"\");\n        setAttachment(\"\");\n    };\n    const onChange = (event) => {\n        const { \n            target:{value}, \n        }=event;\n        setTweet(value);\n    };\n    const onFileChange = (event) => {\n        // console.log(event.target.files);\n        const {target:{files}} = event; // event안에서 target 안으로 가서 file을 받아 옴 \n        const theFile = files[0];\n        // console.log(theFile);\n        const reader = new FileReader();\n        reader.onloadend = (finishedEvent) => {\n            // console.log(finishedEvent)\n            const {currentTarget :{result}} = finishedEvent; // result 가져옴 \n            setAttachment(result);  //attachemnt를 result로 바꾸기 \n        }\n        reader.readAsDataURL(theFile);\n    };\n    const onClearAttachment = () => setAttachment(\"\");\n\n    return (\n        <form onSubmit={onSubmit} className=\"factoryForm\">\n            <div className=\"factoryInput__container\">\n                <input \n                    className=\"factoryInput__input\"\n                    value={tweet}\n                    onChange={onChange}\n                    type=\"text\"\n                    placeholder=\"What's on your mind?\"\n                    maxLength={120}\n                />\n                <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n            </div>\n            <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\n                <span>Add photos</span>\n                <FontAwesomeIcon icon={faPlus} />\n            </label>\n            <input \n                id=\"attach-file\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={onFileChange}\n                style={{\n                    opacity: 0,\n                }}\n            />\n            {attachment && (\n                <div className=\"factoryForm__attachment\">\n                    <img\n                        src={attachment}\n                        style={{\n                            backgroundImage: attachment,\n                        }}\n                    />\n                    <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n                        <span>Remove</span>\n                        <FontAwesomeIcon icon={faTimes} />\n                    </div>\n                </div>\n            )}\n        </form>\n    )\n}\nexport default TweetFactory","import React, { useState, useEffect } from \"react\";\nimport { dbService } from \"../fbase\";\nimport Tweet from \"../components/Tweet\";\nimport TweetFactory from \"../components/TweetFactory\";\n\nconst Home = ({userObj}) => {  // user Obj : props \n    const [tweets, setTweets] = useState([]);\n    // const getTweets = async() => {   //구식... ㅋㅋ\n    //     const dbtweets = await dbService.collection(\"tweets\").get(); // get : 다가져옴 => query snapshot을 가져옴 \n    //     dbtweets.forEach( (document) => {\n    //         const tweetObject = {\n    //             ...document.data(),  // spread attribute ==> data의 내용물 가져옴 \n    //             id: document.id,\n    //         }\n    //         setTweets(prev => [tweetObjext, ...prev]); //값대신 함수 전달 / 함수 return 가장 최근이 가장 위로, 현재 + 이전꺼 \n    //     });  // foreach로 하나씩 보면서 data 가져옴 \n\n    // }\n    useEffect(() => {\n        // getTweets();\n        dbService.collection(\"tweets\").onSnapshot((snapshot)=>{ // onSnapshot : db 변화 listener 변화 생기면 알려줌 //신식 \n            // console.log(\"something happen\");\n            const tweetArray = snapshot.docs.map(doc => ({   // 만들어 \n                id:doc.id, \n                ...doc.data(), \n            }));\n            // console.log(tweetArray);\n            setTweets(tweetArray);\n        })\n    }, []);\n    return (\n        <div className=\"container\">\n            <TweetFactory userObj={userObj}/>\n            <div style={{ marginTop: 30 }}>\n                {tweets.map((tweet) => (     // \n                    // <div key={tweet.id}>\n                    //     <h4>{tweet.tweet}</h4>\n                    // </div>\n                    <Tweet // proc ..? \n                        key={tweet.id} \n                        tweetObj={tweet}  // tweet 의 모든 데이터\n                        isOwner={tweet.creatorId === userObj.uid}  //dynamic proc   : true / false \n                    />\n                ))}\n            </div>\n        </div>\n    );\n    \n};\n\nexport default Home;","import React, { useEffect, useState } from \"react\";\nimport { authService, dbService } from \"../fbase\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default ({ refreshUser, userObj }) => {\n    const history = useHistory();\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n    const onLogOutClick = () => {\n        authService.signOut();\n        history.push(\"/\");\n    }\n    const getMyTweets = async() => {\n        const tweets = await dbService\n            .collection(\"tweets\")\n            .where(\"creatorId\", \"==\", userObj.uid) //filtering 내정보 가져옴 \n            .orderBy(\"createdAt\") // 최초 정렬 시도 -> 에러 -> index 미리 만들어 줘야 함 -> errorcode -> 링크 -> 인덱스 생성 가능\n            .get(); \n        console.log(tweets.docs.map((doc) => doc.data()));\n    };\n    const onChange = (event) =>{\n        const {target : {value}, } = event;\n        setNewDisplayName(value);\n    };\n    const onSubmit = async(event) =>{\n        event.preventDefault();\n        if(userObj.displayName !== newDisplayName){\n            //update \n            // console.log(userObj.updateProfile());\n            await userObj.updateProfile({        //profile page에서 바로 업데이트 안됨 -> 바로 되게 하고 싶음 \n                displayName : newDisplayName,\n            });\n            refreshUser();   // refreshUser를 해도 바로 변화가 발생하지 않음 => react 는 re rendering 작업이 뛰어난데 refresh User코드를 보면 .. App.js ->refresh User\n        }\n    };\n\n    useEffect(() => {\n        getMyTweets();\n    }, [])\n    return (\n        <div className=\"container\">\n            <form onSubmit={onSubmit} className=\"profileForm\">\n                <input \n                    onChange={onChange} \n                    type=\"text\" \n                    autoFocus \n                    placeholder=\"Display name\" \n                    value={newDisplayName} \n                    className=\"formInput\"\n                />\n                <input \n                    type=\"submit\" \n                    value=\"Update Profile\" \n                    className=\"formBtn\"\n                    style={{\n                        marginTop: 10,\n                    }}\n                />\n            </form>\n            <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n                Log Out\n            </span>\n        </div>\n    );\n};","import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Navigation = ({userObj}) => (\n    <nav>\n        <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n            <li>\n                <Link to=\"/\" style={{ marginRight: 10 }}>\n                    <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\n                </Link>\n            </li>\n            <li>\n                <Link\n                    to=\"/profile\"\n                    style={{\n                        marginLeft: 10,\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"center\",\n                        fontSize: 12,\n                    }}\n                >\n                    <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n                <span style={{ marginTop: 10 }}>\n                    {userObj.displayName\n                    ? `${userObj.displayName}의 Profile`\n                    : \"Profile\"}\n                </span>\n                </Link>\n            </li>\n        </ul>\n    </nav>\n)\nexport default Navigation;","import React from \"react\";\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\";\nimport Auth from \"routes/Auth\";\nimport Home from \"routes/Home\";\nimport Profile from \"routes/Profile\";\nimport Navigation from \"components/Navigation\";\n\nconst AppRouter = ({refreshUser, isLoggedIn, userObj}) => {\n    return (\n        <Router> \n            {isLoggedIn && <Navigation userObj={userObj} /> /* isLoggedIn 이면 Navigation도 존재해야 함 */ } \n            <Switch>\n                <>\n                    {isLoggedIn ? (\n                        <div\n                            style={{\n                                maxWidth: 890,\n                                width: \"100%\",\n                                margin: \"0 auto\",\n                                marginTop: 80,\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            <Route exact path = \"/\">\n                                <Home userObj={userObj} />\n                            </Route>\n                            <Route exact path = \"/profile\">\n                                <Profile userObj={userObj} refreshUser={refreshUser}/>\n                            </Route>\n                            {/* <Redirect from =\"*\" to=\"/\" /> 이 방법으로 하거나 profile 안에서 history 를 통해서 Redirect할 수 도 있음 */}\n                        </div> \n                    ) : (\n                        <>\n                            <Route exact path = \"/\">\n                                <Auth />\n                            </Route>\n                            {/* <Redirect from =\"*\" to=\"/\" /> */}\n                        </>\n                    )}\n                </>\n            </Switch>\n        </Router>\n    )\n}\nexport default AppRouter;","import React, { useState, useEffect } from \"react\"\nimport AppRouter from \"components/Router\";\nimport {authService} from \"fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);            \n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n  //listen change user\n    authService.onAuthStateChanged((user) => { // login / logout 하면 발생 , app 초기화 할때 발생 \n      if(user){ // user 정보 있으면 \n        \n        //option 1 \n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        }); // user 정보 update \n        \n        /* //option 2\n        setUserObj(user); */\n\n      } else {\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n  const refreshUser = () => {\n    // setUserObj(authService.currentUser); // firebase 의 authService -> current User정보를 가져옴 : 매우 큼 => rendering하는데 결정 장애가 옴 \n    const user = authService.currentUser;\n\n    //option 1\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n\n    /* //option 2 \n    setUserObj(Object.assign({}, user)); // empty object -> user object  */\n  }\n  return (\n    <>\n      {init ? <AppRouter refreshUser={refreshUser} isLoggedIn={Boolean(userObj)} userObj={userObj} /> : \"Initializing...\" }\n      <footer>&copy; {new Date().getFullYear()} copy-twitter </footer>\n    </> \n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport \"./styles.css\";\n\n// console.log(firebase);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}